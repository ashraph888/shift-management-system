<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shift Management System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }

```
    .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .header {
        background: #2c3e50;
        color: white;
        padding: 20px;
        text-align: center;
        border-radius: 10px;
        margin-bottom: 30px;
    }
    
    .shifts-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .shift-section {
        border: 2px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        background: #f9f9f9;
    }
    
    .shift-a { border-color: #f39c12; background: #fef9e7; }
    .shift-b { border-color: #3498db; background: #e8f4fd; }
    .shift-c { border-color: #27ae60; background: #e8f5e8; }
    
    .shift-header {
        font-size: 1.5em;
        font-weight: bold;
        text-align: center;
        margin-bottom: 20px;
        padding: 10px;
        border-radius: 5px;
    }
    
    .shift-a .shift-header { background: #f39c12; color: white; }
    .shift-b .shift-header { background: #3498db; color: white; }
    .shift-c .shift-header { background: #27ae60; color: white; }
    
    .team-section {
        margin-bottom: 20px;
        padding: 15px;
        background: white;
        border-radius: 8px;
        border: 1px solid #ddd;
    }
    
    .team-header {
        font-weight: bold;
        margin-bottom: 15px;
        font-size: 1.1em;
        color: #2c3e50;
    }
    
    .employee-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 1fr;
        gap: 10px;
        margin-bottom: 10px;
        align-items: center;
    }
    
    select, input {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }
    
    .add-btn {
        background: #3498db;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
        width: 100%;
    }
    
    .add-btn:hover {
        background: #2980b9;
    }
    
    .group-section, .work-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        border: 1px solid #dee2e6;
    }
    
    .section-title {
        font-size: 1.5em;
        color: #2c3e50;
        margin-bottom: 20px;
        text-align: center;
    }
    
    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }
    
    .form-group {
        display: flex;
        flex-direction: column;
    }
    
    .form-group.full-width {
        grid-column: 1 / -1;
    }
    
    label {
        margin-bottom: 5px;
        font-weight: bold;
        color: #555;
    }
    
    .btn {
        padding: 12px 25px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        margin: 5px;
    }
    
    .btn-primary { background: #3498db; color: white; }
    .btn-success { background: #27ae60; color: white; }
    .btn-warning { background: #f39c12; color: white; }
    .btn-secondary { background: #95a5a6; color: white; }
    
    .btn:hover {
        opacity: 0.9;
        transform: translateY(-1px);
    }
    
    .status-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .status-btn {
        padding: 10px 20px;
        border: 2px solid #ddd;
        background: white;
        border-radius: 20px;
        cursor: pointer;
        font-weight: 500;
    }
    
    .status-btn.active {
        background: #3498db;
        color: white;
        border-color: #3498db;
    }
    
    .button-group {
        text-align: center;
        margin-top: 30px;
    }
    
    @media (max-width: 768px) {
        .shifts-container {
            grid-template-columns: 1fr;
        }
        .form-grid {
            grid-template-columns: 1fr;
        }
        .employee-row {
            grid-template-columns: 1fr;
            gap: 5px;
        }
    }
</style>
```

</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üïê Shift Management System</h1>
            <p>Employee Attendance & Work Details Tracking</p>
            <p>Date: <span id="currentDate"></span></p>
        </div>

```
    <!-- Shifts Section -->
    <div class="shifts-container">
        <!-- Shift A -->
        <div class="shift-section shift-a">
            <div class="shift-header">00:30 - 08:30</div>
            
            <div class="team-section">
                <div class="team-header">DUTY IN-CHARGE</div>
                <div id="dutyInchargeA"></div>
                <button class="add-btn" onclick="addEmployee('dutyInchargeA')">+ Add Duty In-charge</button>
            </div>
            
            <div class="team-section">
                <div class="team-header">DUTY MEMBERS</div>
                <div id="dutyMembersA"></div>
                <button class="add-btn" onclick="addEmployee('dutyMembersA')">+ Add Duty Member</button>
            </div>
        </div>
        
        <!-- Shift B -->
        <div class="shift-section shift-b">
            <div class="shift-header">08:00 - 16:00</div>
            
            <div class="team-section">
                <div class="team-header">DUTY IN-CHARGE</div>
                <div id="dutyInchargeB"></div>
                <button class="add-btn" onclick="addEmployee('dutyInchargeB')">+ Add Duty In-charge</button>
            </div>
            
            <div class="team-section">
                <div class="team-header">DUTY MEMBERS</div>
                <div id="dutyMembersB"></div>
                <button class="add-btn" onclick="addEmployee('dutyMembersB')">+ Add Duty Member</button>
            </div>
        </div>
        
        <!-- Shift C -->
        <div class="shift-section shift-c">
            <div class="shift-header">15:30 - 00:30</div>
            
            <div class="team-section">
                <div class="team-header">DUTY IN-CHARGE</div>
                <div id="dutyInchargeC"></div>
                <button class="add-btn" onclick="addEmployee('dutyInchargeC')">+ Add Duty In-charge</button>
            </div>
            
            <div class="team-section">
                <div class="team-header">DUTY MEMBERS</div>
                <div id="dutyMembersC"></div>
                <button class="add-btn" onclick="addEmployee('dutyMembersC')">+ Add Duty Member</button>
            </div>
        </div>
    </div>
    
    <!-- Group Management -->
    <div class="group-section">
        <h2 class="section-title">üë• Group Management</h2>
        
        <div class="form-grid">
            <div class="form-group">
                <label for="groupName">Create New Group</label>
                <input type="text" id="groupName" placeholder="Enter group name">
            </div>
            <div class="form-group">
                <label>&nbsp;</label>
                <button class="btn btn-success" onclick="createGroup()">Create Group</button>
            </div>
        </div>
        
        <div class="form-grid">
            <div class="form-group">
                <label for="selectGroup">Select Group</label>
                <select id="selectGroup" onchange="showGroupMembers()">
                    <option value="">Select a group</option>
                </select>
            </div>
            <div class="form-group">
                <label for="availableStaff">Available Staff</label>
                <select id="availableStaff" multiple style="height: 100px;"></select>
            </div>
        </div>
        
        <div class="form-grid">
            <div class="form-group">
                <label>Group Members</label>
                <div id="groupMembers" style="min-height: 100px; border: 1px solid #ddd; padding: 10px; background: white; border-radius: 5px;">
                    Select a group to view members
                </div>
            </div>
            <div class="form-group">
                <label>&nbsp;</label>
                <button class="btn btn-primary" onclick="addToGroup()">Add to Group</button>
                <button class="btn btn-secondary" onclick="removeFromGroup()">Remove from Group</button>
            </div>
        </div>
    </div>
    
    <!-- Work Details -->
    <div class="work-section">
        <h2 class="section-title">üìã Work Details Entry</h2>
        
        <div class="form-grid">
            <div class="form-group">
                <label for="logTime">Log Time</label>
                <input type="datetime-local" id="logTime">
            </div>
            <div class="form-group">
                <label for="department">Department</label>
                <select id="department">
                    <option value="">Select Department</option>
                    <option value="Security">Security</option>
                    <option value="Maintenance">Maintenance</option>
                    <option value="Housekeeping">Housekeeping</option>
                    <option value="Administration">Administration</option>
                    <option value="Operations">Operations</option>
                </select>
            </div>
            <div class="form-group">
                <label for="task">Task</label>
                <input type="text" id="task" placeholder="Enter task name">
            </div>
            <div class="form-group">
                <label for="assignedShift">Assigned Shift</label>
                <select id="assignedShift">
                    <option value="">Select Shift</option>
                    <option value="00:30-08:30">Shift A (00:30 - 08:30)</option>
                    <option value="08:00-16:00">Shift B (08:00 - 16:00)</option>
                    <option value="15:30-00:30">Shift C (15:30 - 00:30)</option>
                </select>
            </div>
            <div class="form-group full-width">
                <label for="workDetails">Work Details</label>
                <textarea id="workDetails" rows="3" placeholder="Describe the work details..."></textarea>
            </div>
            <div class="form-group">
                <label for="assignedStaffs">Assigned Staffs</label>
                <select id="assignedStaffs" multiple style="height: 80px;"></select>
            </div>
            <div class="form-group">
                <label for="attendTime">Attend Time</label>
                <input type="time" id="attendTime">
            </div>
            <div class="form-group full-width">
                <label>Status</label>
                <div class="status-buttons">
                    <button type="button" class="status-btn" onclick="selectStatus(this, 'Completed')">‚úÖ Completed</button>
                    <button type="button" class="status-btn" onclick="selectStatus(this, 'In Progress')">üîÑ In Progress</button>
                    <button type="button" class="status-btn" onclick="selectStatus(this, 'Pending')">‚è≥ Pending</button>
                    <button type="button" class="status-btn" onclick="selectStatus(this, 'On Hold')">‚è∏Ô∏è On Hold</button>
                </div>
            </div>
            <div class="form-group">
                <label for="endTime">End Time</label>
                <input type="time" id="endTime">
            </div>
            <div class="form-group">
                <label for="reason">Reason (if needed)</label>
                <textarea id="reason" rows="2" placeholder="Enter reason if status is Pending or On Hold..."></textarea>
            </div>
        </div>
        
        <div class="button-group">
            <button class="btn btn-primary" onclick="saveWorkDetails()">üíæ Save Work Details</button>
            <button class="btn btn-secondary" onclick="clearForms()">üîÑ Clear Forms</button>
            <button class="btn btn-success" onclick="saveAllData()">üìä Save All Data</button>
            <button class="btn btn-warning" onclick="downloadReport()">üìã Download Report</button>
        </div>
    </div>
</div>

<script>
    // Staff list
    const staff = [
        { name: 'Shukh Hussain', rc: 'T941' },
        { name: 'Hassan Khaleel', rc: 'A-1733' },
        { name: 'Ahmed Neesham', rc: '26552' },
        { name: 'Ali Samaah', rc: 'A-2352' },
        { name: 'Umar Yoosuf', rc: '12283' },
        { name: 'Abdul Rauf Hamid', rc: 'A-1584' },
        { name: 'Abdulla Hamdhan', rc: 'A-2453' },
        { name: 'Abdul Naeem', rc: 'A-2658' },
        { name: 'Ahmed Mohamed', rc: 'A-2718' },
        { name: 'Mohamed Adam', rc: 'A-3030' },
        { name: 'Moosa Solah', rc: 'A-3055' },
        { name: 'Ahmed Naseem', rc: 'A-3648' },
        { name: 'Hussain Suneel', rc: 'A-6453' },
        { name: 'Saaidh Abdul Raheem', rc: 'A-6623' },
        { name: 'Hussain Abdul Rahman', rc: 'A-6634' },
        { name: 'Safuraaz Mohamed', rc: 'A-7617' },
        { name: 'Mohamed Irfan Ibrahim', rc: 'A-7619' },
        { name: 'Ahuzam Mohamed', rc: 'A-7620' },
        { name: 'Ibthihaal Hassan', rc: 'A-7646' },
        { name: 'Ahmed Zareer', rc: 'A-7658' },
        { name: 'Mohamed Hannadh', rc: 'A-7301' },
        { name: 'Ahmed Zareer', rc: 'A-7735' },
        { name: 'Abdul Muhuthee Abdul Azeez', rc: 'A-7737' },
        { name: 'Ahmed Haneef', rc: 'A-7738' },
        { name: 'Ali Akram', rc: 'A-7887' },
        { name: 'Abdul Ali', rc: 'A-1384' },
        { name: 'Fauzaan Ahmed fayaaz', rc: 'A-6331' },
        { name: 'Mohamed Ashraf', rc: 'A-8332' },
        { name: 'Abdulla Shuraim Bin Nooh', rc: 'A-6605' },
        { name: 'Ali Mohamed', rc: 'A-8632' },
        { name: 'Ahmed Siaf Mohamed Hussani', rc: 'A-8611' },
        { name: 'Gamaaldeen Fathuhee', rc: 'A-3051' },
        { name: 'Maazin Waheed', rc: 'A-3108' },
        { name: 'Abdul Rahman Easa', rc: 'A-3173' },
        { name: 'Meesum Abdul Majeed', rc: 'A-9451' },
        { name: 'Ahmed Afnan', rc: 'A-8385' },
        { name: 'Afwan Abdulla Naseer', rc: 'A-10356' },
        { name: 'Bashar Ahmed', rc: 'A-10222' },
        { name: 'Umar Zaahir', rc: 'A-2688' },
        { name: 'Rasham Shifaun Abdulla', rc: 'A-10218' },
        { name: 'Yusuf Alain Bin Azim', rc: 'A-10383' },
        { name: 'Abdul Ali', rc: 'A-8713' },
        { name: 'Mohamed Sharan', rc: 'A-8813' },
        { name: 'Ahmed Tholal', rc: 'A-11383' },
        { name: 'Moosa Naeem', rc: 'A-1389' }
    ];
    
    let groups = {};
    let workEntries = [];
    let selectedStatus = '';
    
    // Initialize page
    window.onload = function() {
        document.getElementById('currentDate').textContent = new Date().toLocaleDateString();
        document.getElementById('logTime').value = new Date().toISOString().slice(0, 16);
        populateStaffDropdowns();
    };
    
    // Populate all staff dropdowns
    function populateStaffDropdowns() {
        const availableStaff = document.getElementById('availableStaff');
        const assignedStaffs = document.getElementById('assignedStaffs');
        
        staff.forEach(person => {
            // Available staff
            const option1 = document.createElement('option');
            option1.value = person.rc;
            option1.textContent = `${person.name} (${person.rc})`;
            availableStaff.appendChild(option1);
            
            // Assigned staffs
            const option2 = document.createElement('option');
            option2.value = person.name;
            option2.textContent = `${person.name} (${person.rc})`;
            assignedStaffs.appendChild(option2);
        });
    }
    
    // Add employee to shift
    function addEmployee(containerId) {
        const container = document.getElementById(containerId);
        const row = document.createElement('div');
        row.className = 'employee-row';
        
        let staffOptions = '<option value="">Select Employee</option>';
        staff.forEach(person => {
            staffOptions += `<option value="${person.rc}">${person.name} (${person.rc})</option>`;
        });
        
        row.innerHTML = `
            <select onchange="fillRC(this)">
                ${staffOptions}
            </select>
            <input type="text" placeholder="RC #" readonly>
            <select>
                <option value="">Status</option>
                <option value="Present">Present</option>
                <option value="Absent">Absent</option>
                <option value="Late">Late</option>
                <option value="SL">Sick Leave</option>
                <option value="FRL">FRL</option>
            </select>
            <select>
                <option value="">Performance</option>
                <option value="Excellent">Excellent</option>
                <option value="Good">Good</option>
                <option value="Average">Average</option>
                <option value="Poor">Poor</option>
            </select>
        `;
        
        container.appendChild(row);
    }
    
    // Fill RC number when employee is selected
    function fillRC(select) {
        const rc = select.value;
        const rcInput = select.parentElement.querySelector('input');
        rcInput.value = rc;
    }
    
    // Create new group
    function createGroup() {
        const groupName = document.getElementById('groupName').value.trim();
        if (!groupName) {
            alert('Please enter a group name');
            return;
        }
        
        if (groups[groupName]) {
            alert('Group already exists');
            return;
        }
        
        groups[groupName] = [];
        document.getElementById('groupName').value = '';
        updateGroupSelect();
        alert(`Group "${groupName}" created!`);
    }
    
    // Update group selection dropdown
    function updateGroupSelect() {
        const select = document.getElementById('selectGroup');
        select.innerHTML = '<option value="">Select a group</option>';
        
        Object.keys(groups).forEach(groupName => {
            const option = document.createElement('option');
            option.value = groupName;
            option.textContent = groupName;
            select.appendChild(option);
        });
    }
    
    // Show group members
    function showGroupMembers() {
        const groupName = document.getElementById('selectGroup').value;
        const membersDiv = document.getElementById('groupMembers');
        
        if (!groupName) {
            membersDiv.innerHTML = 'Select a group to view members';
            return;
        }
        
        const members = groups[groupName];
        if (members.length === 0) {
            membersDiv.innerHTML = 'No members in this group';
            return;
        }
        
        let html = '';
        members.forEach(rc => {
            const person = staff.find(s => s.rc === rc);
            if (person) {
                html += `<div style="padding: 5px; border-bottom: 1px solid #eee;">
                    <strong>${person.name}</strong> (${person.rc})
                    <button onclick="removeFromGroupDirect('${rc}')" style="float: right; background: red; color: white; border: none; padding: 2px 8px; border-radius: 3px; cursor: pointer;">Remove</button>
                </div>`;
            }
        });
        
        membersDiv.innerHTML = html;
    }
    
    // Add selected staff to group
    function addToGroup() {
        const groupName = document.getElementById('selectGroup').value;
        const selectedOptions = document.getElementById('availableStaff').selectedOptions;
        
        if (!groupName) {
            alert('Please select a group first');
            return;
        }
        
        if (selectedOptions.length === 0) {
            alert('Please select staff members to add');
            return;
        }
        
        Array.from(selectedOptions).forEach(option => {
            const rc = option.value;
            if (!groups[groupName].includes(rc)) {
                groups[groupName].push(rc);
            }
        });
        
        showGroupMembers();
        alert(`${selectedOptions.length} member(s) added to ${groupName}`);
    }
    
    // Remove from group
    function removeFromGroup() {
        const groupName = document.getElementById('selectGroup').value;
        const selectedOptions = document.getElementById('availableStaff').selectedOptions;
        
        if (!groupName) {
            alert('Please select a group first');
            return;
        }
        
        Array.from(selectedOptions).forEach(option => {
            const rc = option.value;
            const index = groups[groupName].indexOf(rc);
            if (index > -1) {
                groups[groupName].splice(index, 1);
            }
        });
        
        showGroupMembers();
        alert('Members removed from group');
    }
    
    // Remove from group directly
    function removeFromGroupDirect(rc) {
        const groupName = document.getElementById('selectGroup').value;
        const index = groups[groupName].indexOf(rc);
        if (index > -1) {
            groups[groupName].splice(index, 1);
            showGroupMembers();
        }
    }
    
    // Select work status
    function selectStatus(button, status) {
        document.querySelectorAll('.status-btn').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        selectedStatus = status;
    }
    
    // Save work details
    function saveWorkDetails() {
        if (!selectedStatus) {
            alert('Please select a status');
            return;
        }
        
        const workEntry = {
            logTime: document.getElementById('logTime').value,
            department: document.getElementById('department').value,
            task: document.getElementById('task').value,
            workDetails: document.getElementById('workDetails').value,
            assignedShift: document.getElementById('assignedShift').value,
            assignedStaffs: Array.from(document.getElementById('assignedStaffs').selectedOptions).map(o => o.value),
            attendTime: document.getElementById('attendTime').value,
            status: selectedStatus,
            endTime: document.getElementById('endTime').value,
            reason: document.getElementById('reason').value,
            timestamp: new Date().toLocaleString()
        };
        
        workEntries.push(workEntry);
        alert('Work details saved!');
        clearWorkForm();
    }
    
    // Clear work form
    function clearWorkForm() {
        document.getElementById('logTime').value = new Date().toISOString().slice(0, 16);
        document.getElementById('department').value = '';
        document.getElementById('task').value = '';
        document.getElementById('workDetails').value = '';
        document.getElementById('assignedShift').value = '';
        document.getElementById('attendTime').value = '';
        document.getElementById('endTime').value = '';
        document.getElementById('reason').value = '';
        document.querySelectorAll('.status-btn').forEach(btn => btn.classList.remove('active'));
        selectedStatus = '';
    }
    
    // Clear all forms
    function clearForms() {
        clearWorkForm();
        document.getElementById('groupName').value = '';
        document.getElementById('selectGroup').value = '';
        document.getElementById('groupMembers').innerHTML = 'Select a group to view members';
    }
    
    // Save all data
    function saveAllData() {
        const allData = {
            groups: groups,
            workEntries: workEntries,
            timestamp: new Date().toLocaleString()
        };
        
        console.log('All data saved:', allData);
        alert('All data saved successfully!');
    }
    
    // Download report
    function downloadReport() {
        let report = `SHIFT MANAGEMENT REPORT\n`;
        report += `Generated: ${new Date().toLocaleString()}\n`;
        report += `${'='.repeat(50)}\n\n`;
        
        // Groups
        report += `GROUPS:\n`;
        Object.keys(groups).forEach(groupName => {
            report += `${groupName}: ${groups[groupName].length} members\n`;
        });
        
        // Work entries
        report += `\nWORK ENTRIES: ${workEntries.length}\n`;
        workEntries.forEach((entry, index) => {
            report += `${index + 1}. ${entry.task} - ${entry.status}\n`;
        });
        
        const blob = new Blob([report], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `shift_report_${new Date().toISOString().split('T')[0]}.txt`;
        a.click();
        URL.revokeObjectURL(url);
    }
</script>
```

</body>
</html>
